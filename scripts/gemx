#!/bin/bash

echo ""
echo "Instructions:"
echo "	gemx <Application> [Arguments]"
echo "	: In batch window, put <Application> to \"GENERAL -> Application\" field. There are three commands supported: gemm_perf, spmv_perf and gemm_test_python."
echo "	: In batch window, put [Arguments] to \"OPTIONAL -> Arguments\" field. It contains the dimension sizes for gemm_perf application, or sparse matrix file name for spmv_perf application."
echo ""
echo "Example:"
echo "	# Run gemm_perf application to measure the FPGA GEMM performance. The GEMM operation performed on FPGA is C = A * B + X."
echo "	# Where the dimension sizes for matrix A, B, C and X are M x K; K x N; M x N and M x N. In this example, M=512, K=128 and N=256."
echo "	# gemx gemm_perf 512 128 256"
echo "	Application: gemm_perf"
echo "	Option: 512 128 256"
echo ""
echo "	# Run spmv_perf application to measure the FPGA SPMV performance. The SPMV operation performed on FPGA is C += A * B."
echo "	# Where A is a sparse matrix and B is a dense vector. In this example, sparse matrix A comes from file /opt/gemx/data/spmv/Rucci1.mtx.gz."
echo "	# gemx spmv_perf /opt/gemx/data/spmv/Rucci1.mtx.gz"
echo "	Application: spmv_perf"
echo "	Option: /opt/gemx/data/spmv/Rucci1.mtx.gz"
echo ""
echo "	# Run gemm_test_python application to lauch the FPGA GEMM operation from Python code and verify the functionality."
echo "	# gemx gemm_test_python"
echo "	Application: gemm_test_python"
echo ""

if [ -n "$1" ]; then
	case "$1" in
	"gemm_perf")
		arr=($2)	
		M=${arr[0]}
		K=${arr[1]}
		N=${arr[2]}
		if [ -z "$M" ] || [ $M -lt 128 ] || [ `expr $M % 128` -ne 0 ]; then
			echo "ERROR: $M should be multiple of 128"
			exit 1
		fi
		if [ -z "$K" ] || [ $K -lt 128 ] || [ `expr $K % 128` -ne 0 ]; then
			echo "ERROR: $K should be multiple of 128"
			exit 1
		fi
		if [ -z "$N" ] || [ $N -lt 128 ] || [ `expr $N % 128` -ne 0 ]; then
			echo "ERROR: $N should be multiple of 128"
			exit 1
		fi
		echo "** Running gemm performance test"
		echo "** Gemm operation: C($M x $N) = A($M x $K) * B($K x $N) + X($M x $N)"
		PROGRAM="/opt/gemx/out_host/gemx_api_gemm.exe /opt/gemx/xclbins/gemm_perf_vcu1525.xclbin $M $K $N $K $N $N $N 1 0 A B C X"
		;;
	"spmv_perf")
		spm_file=$2
		if [ ! -f "$spm_file" ]; then
			echo "ERROR: sparse matrix file $spm_file not found"
			exit 1
		fi
		echo "** Running spmv performance test with sparse matrix file $spm_file"
		PROGRAM="/opt/gemx/out_host/gemx_api_spmv.exe /opt/gemx/xclbins/spmv_perf_vcu1525.xclbin 0 0 0 $spm_file"
		;;
	"gemm_test_python")
		echo "** Running gemm functionality tests with Python function calls"
		PROGRAM="python /opt/gemx/tests/test_gemm.py --xclbin /opt/gemx/xclbins/gemm_python_vcu1525.xclbin --gemxlib /opt/gemx/out_host/lib/libgemxhost.so --cfg /opt/gemx/xclbins/gemm_python_cfg.dat"
		;;
	*)
		break
	esac
fi	

echo "program to run is:"
echo $PROGRAM
pre_msg() {
	echo "ERROR: "
	echo "   This node failed it's pre-validation script"
	echo "   Please send an email to support@nimbix.net"
	echo "   and provide the Job Number."
	
	echo "---"
	cat /tmp/output.log
	echo "---"
	rm /tmp/output.log

	exit 1
}

post_msg() {
	echo "ERROR:"
	echo "  This node faied it's post-validation script. This"
	echo "  indicates that the board was left in an invalid"
	echo "  state after the execution of your application."
	echo "  To remedy the issue, please contact support@nimbix.net"
	echo "  with the Job Number and any additional information"
	echo "  For futher support, please create a new topic on the"
	echo "  SDAccel forums."

	echo "---"
	cat /tmp/output.log
	echo "---"
	rm /tmp/output.log

	exit 1
}

validate() {
	if [ -f SKIPPREPOST ]; then
		return 0
	fi

	pushd . > /dev/null 2>&1
	TMPDIR=$(mktemp -d)
	cd ${TMPDIR}
	cp -r /opt/sdx_runtime/test/{vadd,xclbin} .
	timeout 30s ./vadd > /tmp/output.log 2>&1
	rc=$?
	popd > /dev/null 2>&1
	rm -rf ${TMPDIR}

	return $rc
}
export PYTHONPATH=/opt/gemx/src/python
export LD_LIBRARY_PATH=/opt/boost/lib:/opt/sdx_runtime/runtime/lib/x86_64:/opt/sdx_runtime/opencv:$LD_LIBRARY_PATH
export XILINX_OPENCL=/opt/sdx_runtime

validate || pre_msg

echo ""
echo "**********************"
echo ""
set -x
$PROGRAM 
rc=$?
set +x
echo ""
echo "**********************"
validate || post_msg

exit $rc
